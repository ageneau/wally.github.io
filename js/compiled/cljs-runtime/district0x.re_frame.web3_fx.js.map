{"version":3,"sources":["district0x/re_frame/web3_fx.cljs"],"mappings":"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","names":["district0x.re-frame.web3-fx/*listeners*","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","district0x.re-frame.web3-fx/block-filter-opts?","x","cljs.core/map?","cljs.spec.alpha/def-impl","cljs.core/any?","cljs.core/complement","cljs.core/nil?","cljs.core/vector?","cljs.core/string?","cljs.spec.alpha/nilable-impl","cljs.core/boolean?","cljs.core/sequential?","p1__42635#","cljs.core/fn?","cljs.core/Keyword","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__42636","cljs.core/coll?","cljs.core/keyword?","G__42637","G__42638","cljs.spec.alpha/map-spec-impl","G__42639","G__42640","cljs.core/contains?","G__42641","G__42642","G__42643","G__42644","G__42645","G__42646","G__42647","G__42648","G__42649","G__42650","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","district0x.re-frame.web3-fx/dispach-fn","seq42651","G__42652","cljs.core/first","cljs.core/next","G__42653","self__4776__auto__","on-success","on-error","args","err","res","G__42654","re-frame.core/dispatch","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/cons","G__42655","district0x.re-frame.web3-fx/contract-event-dispach-fn","G__42656","G__42657","district0x.re-frame.web3-fx/stop-listener!","id","temp__5735__auto__","filters","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","seq__42658","cljs.core/seq","chunk__42659","count__42660","i__42661","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","filter","cljs_web3.eth.stop_watching_BANG_.cljs$core$IFn$_invoke$arity$variadic","p__42662","map__42663","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","web3","block-filter-opts","callback","district0x.re-frame.web3-fx/start-listener!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/conj","cljs_web3.eth.filter.cljs$core$IFn$_invoke$arity$variadic","p__42665","map__42666","instance","event","event-filter-opts","district0x.re-frame.web3-fx/start-event-listener!","cljs_web3.eth.contract_call.cljs$core$IFn$_invoke$arity$variadic","p__42670","map__42671","on-tx-error","tx-hash","on-tx-success","on-tx-receipt-n","on-tx-receipt","on-tx-success-n","on-tx-error-n","district0x.re-frame.web3-fx/dispatch-on-tx-receipt-fn","cljs_web3.eth.get_transaction_receipt.cljs$core$IFn$_invoke$arity$variadic","_","receipt","G__42673","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","pred__42674","p1__42668#","p2__42669#","expr__42675","js/Error","G__42677","seq__42678","chunk__42679","count__42680","i__42681","G__42684","G__42685","G__42686","seq__42687","chunk__42688","count__42689","i__42690","G__42693","G__42694","p__42695","map__42696","on-tx-hash-error-n","on-tx-hash-error","on-tx-hash-n","on-tx-hash","district0x.re-frame.web3-fx/contract-state-call-callback","G__42698","seq__42699","chunk__42700","count__42701","i__42702","G__42705","G__42706","G__42707","seq__42708","chunk__42709","count__42710","i__42711","G__42714","G__42715","listener-id","cljs.core.rand.cljs$core$IFn$_invoke$arity$1","G__42716","G__42717","re-frame.core/reg-fx","p__42718","map__42719","events","params","cljs.spec.alpha/*compile-asserts*","cljs.spec.alpha/*runtime-asserts*","cljs.spec.alpha/assert*","seq__42721","chunk__42722","count__42723","i__42724","map__42729","map__42731","G__42733","G__42734","p__42735","map__42736","transactions","seq__42738","chunk__42739","count__42740","i__42741","map__42746","map__42748","or__4185__auto__","G__42750","G__42751","p__42752","map__42753","fns","seq__42755","chunk__42756","count__42757","i__42758","map__42763","tx-opts","fn","map__42765","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs-web3.eth/contract-call","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","G__42767","G__42768","p__42769","map__42770","addresses","seq__42772","chunk__42773","count__42774","i__42775","map__42780","address","watch?","map__42782","cljs.core/not","cljs_web3.eth.get_balance.cljs$core$IFn$_invoke$arity$variadic","and__4174__auto__","G__42784","G__42785","p__42786","map__42787","config","G__42789","G__42790","p__42791","map__42792","ids","seq__42794","chunk__42795","count__42796","i__42797","G__42798","G__42799","seq__42800","chunk__42801","count__42802","i__42803","cljs.core/keys"],"sourcesContent":["(ns district0x.re-frame.web3-fx\n  (:require\n    [cljs-web3.eth :as web3-eth]\n    [cljs.spec.alpha :as s]\n    [re-frame.core :refer [reg-fx dispatch console reg-event-db reg-event-fx]]))\n\n(def *listeners* (atom {}))\n\n(defn- block-filter-opts? [x]\n  (or (map? x) (string? x) (nil? x)))\n\n(s/def ::id any?)\n(s/def ::instance (complement nil?))\n(s/def ::dispatch vector?)\n(s/def ::contract-fn-arg any?)\n(s/def ::address string?)\n(s/def ::watch? (s/nilable boolean?))\n(s/def ::block-filter-opts block-filter-opts?)\n(s/def ::web3 (complement nil?))\n(s/def ::event-ids sequential?)\n(s/def ::fn #(or (fn? %) (keyword? %) (string? %)))\n(s/def ::args (s/coll-of ::contract-fn-arg))\n(s/def ::on-success ::dispatch)\n(s/def ::on-error ::dispatch)\n(s/def ::on-tx-hash ::dispatch)\n(s/def ::on-tx-hash-error ::dispatch)\n(s/def ::on-tx-receipt ::dispatch)\n(s/def ::on-tx-success ::dispatch)\n(s/def ::on-tx-error ::dispatch)\n(s/def ::tx-opts map?)\n(s/def ::event keyword?)\n(s/def ::event-id any?)\n(s/def ::event-filter-opts (s/nilable map?))\n(s/def ::block-filter-opts block-filter-opts?)\n(s/def ::tx-hashes (s/coll-of string?))\n\n(s/def ::fns\n  (s/coll-of (s/nilable (s/keys :opt-un [::args\n                                         ::tx-opts\n                                         ::on-success\n                                         ::on-error\n                                         ::on-tx-hash\n                                         ::on-tx-hash-error\n                                         ::on-tx-receipt\n                                         ::on-tx-success\n                                         ::on-tx-error\n                                         ::fn\n                                         ::instance]))))\n(s/def ::call (s/keys :req-un [::web3 ::fns]))\n\n\n(s/def ::events (s/coll-of (s/nilable (s/keys :req-un [::instance ::event]\n                                              :opt-un [::id\n                                                       ::event-filter-opts\n                                                       ::block-filter-opts\n                                                       ::on-success\n                                                       ::on-error]))))\n(s/def ::watch-events (s/keys :req-un [::events]))\n\n\n(s/def ::transactions\n  (s/coll-of (s/nilable (s/keys :req-un [::tx-hash]\n                                :opt-un [::on-tx-receipt ::on-tx-success ::on-tx-error ::id]))))\n(s/def ::watch-transactions (s/keys :req-un [::web3 ::transactions]))\n\n(s/def ::addresses\n  (s/coll-of (s/nilable (s/keys :req-un [::address ::on-success]\n                                :opt-un [::on-error ::watch? ::id]))))\n\n(s/def ::get-balances (s/keys :req-un [::addresses ::web3]))\n\n\n(s/def ::listen (s/keys :req-un [::on-success ::on-error ::web3 ::block-filter-opts]))\n\n\n(defn- dispach-fn [on-success on-error & args]\n  (fn [err res]\n    (if err\n      (dispatch (vec (concat on-error (cons err args))))\n      (dispatch (vec (concat on-success (cons res args)))))))\n\n\n(defn- contract-event-dispach-fn [on-success on-error]\n  (fn [err res]\n    (if err\n      (dispatch (vec (concat on-error [err])))\n      (dispatch (vec (concat on-success [(:args res) res]))))))\n\n\n(defn- stop-listener! [id]\n  (when-let [filters (get @*listeners* id)]\n    (swap! *listeners* dissoc id)\n    (doseq [filter filters]\n      (web3-eth/stop-watching! filter (fn [])))))\n\n\n(defn- start-listener! [{:keys [:web3 :id :block-filter-opts :callback]}]\n  (let [id (if id id callback)]\n    (stop-listener! id)\n    (swap! *listeners* update id conj (web3-eth/filter web3 block-filter-opts callback))\n    id))\n\n\n(defn- start-event-listener! [{:keys [:instance :id :event :event-filter-opts :block-filter-opts :callback]}]\n  (let [id (if id id callback)]\n    (stop-listener! id)\n    (->> (web3-eth/contract-call\n           instance\n           event\n           event-filter-opts\n           block-filter-opts\n           callback)\n      (swap! *listeners* update id conj))\n    id))\n\n\n(defn- dispatch-on-tx-receipt-fn [{:keys [:web3 :id :tx-hash\n                                          :on-tx-receipt-n :on-tx-receipt :on-tx-error\n                                          :on-tx-error-n :on-tx-success-n :on-tx-success]}]\n  (fn [err]\n    (when-not err\n      (web3-eth/get-transaction-receipt\n        web3\n        tx-hash\n        (fn [_ receipt]\n          (when (:block-number receipt)\n            (stop-listener! id)\n            (when on-tx-receipt\n              (dispatch (conj (vec on-tx-receipt) receipt)))\n            (condp #(contains? %1 %2) (:status receipt)\n              #{\"0x0\" \"0x00\" 0} (do (when on-tx-error\n                                      (dispatch (conj (vec on-tx-error) receipt)))\n                                    (when on-tx-error-n\n                                      (doseq [callback on-tx-error-n]\n                                        (dispatch (conj (vec callback) receipt)))))\n              #{\"0x1\" \"0x01\" 1} (do (when on-tx-success\n                                      (dispatch (conj (vec on-tx-success) receipt)))\n                                    (when on-tx-success-n\n                                      (doseq [callback on-tx-success-n]\n                                        (dispatch (conj (vec callback) receipt))))))))))))\n\n\n(defn- contract-state-call-callback [{:keys [:web3\n                                             :on-tx-receipt-n\n                                             :on-tx-hash-n :on-tx-hash-error-n\n                                             :on-tx-success-n :on-tx-error-n\n                                             :on-tx-receipt\n                                             :on-tx-hash :on-tx-hash-error\n                                             :on-tx-success :on-tx-error]}]\n  (fn [err tx-hash]\n    (if err\n      (do (when on-tx-hash-error\n            (dispatch (conj (vec on-tx-hash-error) err)))\n          (when on-tx-hash-error-n\n            (doseq [callback on-tx-hash-error-n]\n              (dispatch (conj (vec callback) err)))))\n\n      (do (when on-tx-hash\n            (dispatch (conj (vec on-tx-hash) tx-hash)))\n          (when on-tx-hash-n\n            (doseq [callback on-tx-hash-n]\n              (dispatch (conj (vec callback) tx-hash))))\n          (let [listener-id (rand 9999999)]\n            (start-listener!\n             {:web3 web3\n              :id listener-id\n              :block-filter-opts \"latest\"\n              :callback (dispatch-on-tx-receipt-fn {:id listener-id\n                                                    :tx-hash tx-hash\n                                                    :web3 web3\n                                                    :on-tx-receipt-n on-tx-receipt-n\n                                                    :on-tx-success-n on-tx-success-n\n                                                    :on-tx-error-n on-tx-error-n\n                                                    :on-tx-receipt on-tx-receipt\n                                                    :on-tx-error on-tx-error\n                                                    :on-tx-success on-tx-success})}))))))\n\n\n(reg-fx\n  :web3/watch-events\n  (fn [{:keys [:events] :as params}]\n    (s/assert ::watch-events params)\n    (doseq [{:keys [:id :instance :block-filter-opts :event-filter-opts :on-success :on-error\n                    :event]} events]\n      (start-event-listener!\n        {:instance instance\n         :id id\n         :event event\n         :event-filter-opts event-filter-opts\n         :block-filter-opts block-filter-opts\n         :callback (contract-event-dispach-fn on-success on-error)}))))\n\n\n(reg-fx\n  :web3/watch-transactions\n  (fn [{:keys [:web3 :transactions] :as params}]\n    (s/assert ::watch-transactions params)\n    (doseq [{:keys [:tx-hash :on-tx-receipt :on-tx-success :on-tx-error :id]} transactions]\n      (let [listener-id (or id (rand 9999999))]\n        (start-listener!\n          {:web3 web3\n           :id listener-id\n           :block-filter-opts \"latest\"\n           :callback (dispatch-on-tx-receipt-fn\n                       {:id listener-id\n                        :on-tx-receipt on-tx-receipt\n                        :on-tx-success on-tx-success\n                        :on-tx-error on-tx-error\n                        :tx-hash tx-hash\n                        :web3 web3})})))))\n\n\n(reg-fx\n  :web3/call\n  (fn [{:keys [:web3 :fns] :as params}]\n    (s/assert ::call params)\n    (doseq [{:keys [:instance :fn :args :tx-opts\n                    :on-tx-receipt-n\n                    :on-tx-hash-n :on-tx-hash-error-n\n                    :on-tx-success-n :on-tx-error-n\n                    :on-tx-receipt\n                    :on-tx-hash :on-tx-hash-error\n                    :on-tx-success :on-tx-error\n                    :on-success :on-error]} (remove nil? fns)]\n      (if instance\n        (if tx-opts\n          (apply web3-eth/contract-call\n                 (concat [instance fn]\n                         args\n                         [tx-opts]\n                         [(contract-state-call-callback {:web3 web3\n                                                         :on-tx-receipt on-tx-receipt\n                                                         :on-tx-receipt-n on-tx-receipt-n\n                                                         :on-tx-hash-n on-tx-hash-n\n                                                         :on-tx-hash-error-n on-tx-hash-error-n\n                                                         :on-tx-success-n on-tx-success-n\n                                                         :on-tx-error-n on-tx-error-n\n                                                         :on-tx-hash on-tx-hash\n                                                         :on-tx-hash-error on-tx-hash-error\n                                                         :on-tx-success on-tx-success\n                                                         :on-tx-error on-tx-error})]))\n          (apply web3-eth/contract-call\n                 (concat [instance fn]\n                         args\n                         [(dispach-fn on-success on-error)])))\n        (apply fn (concat [web3] args [(dispach-fn on-success on-error)]))))))\n\n\n(reg-fx\n  :web3/get-balances\n  (fn [{:keys [:addresses :web3] :as params}]\n    (s/assert ::get-balances params)\n    (doseq [{:keys [:address :on-success :on-error :watch? :instance :id]} addresses]\n\n      (if-not instance\n        (web3-eth/get-balance web3 address (dispach-fn on-success on-error))\n        (web3-eth/contract-call instance :balance-of address (dispach-fn on-success on-error)))\n\n      (when (and watch? (seq addresses))\n        (if-not instance\n          (start-listener!\n            {:web3 web3\n             :id id\n             :block-filter-opts \"latest\"\n             :callback (fn [err]\n                         (when-not err\n                           (web3-eth/get-balance web3 address (dispach-fn on-success on-error))))})\n          (do\n            (start-event-listener!\n              {:instance instance\n               :id id\n               :event :Transfer\n               :event-filter-opts {:from address}\n               :block-filter-opts \"latest\"\n               :callback (fn []\n                           (web3-eth/contract-call instance :balance-of address (dispach-fn on-success on-error)))})\n            (start-event-listener!\n              {:instance instance\n               :id id\n               :event :Transfer\n               :event-filter-opts {:to address}\n               :block-filter-opts \"latest\"\n               :callback (fn []\n                           (web3-eth/contract-call instance :balance-of address (dispach-fn on-success on-error)))})))))))\n\n(reg-fx\n  :web3/watch-blocks\n  (fn [{:keys [:web3 :id :block-filter-opts :on-success :on-error] :as config}]\n    (s/assert ::listen config)\n    (start-listener!\n      {:web3 web3\n       :id id\n       :block-filter-opts block-filter-opts\n       :callback (dispach-fn on-success on-error)})))\n\n(reg-fx\n  :web3/stop-watching\n  (fn [{:keys [:ids]}]\n    (doseq [id ids]\n      (stop-listener! id))))\n\n\n(reg-fx\n  :web3/stop-watching-all\n  (fn []\n    (doseq [id (keys @*listeners*)]\n      (stop-listener! id))))\n"]}