{"version":3,"sources":["wally/wallet.cljs"],"mappings":"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","names":["wally.wallet/sablier-abi","js/JSON.parse","wally.wallet/erc20-abi","wally.wallet/w3","js/Web3","js/window.ethereum","G__54329","G__54330","re-frame.core/reg-fx","p__54331","map__54332","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","on-success","on-failure","js/ethereum.enable","re-frame.core/dispatch","G__54334","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__54335","wally.wallet/current-network","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","wally.data/app-data","cljs-web3.core/version-network","wally.wallet/sablier-contract","cljs_web3.eth.contract_at.cljs$core$IFn$_invoke$arity$variadic","wally.wallet/erc20-contract","address","wally.wallet/approve-spender","ct-address","spender","amount","cb","wally.wallet/sablier-create-stream","recipient","deposit","token-address","start-time","stop-time","wally.wallet/epoch-time-seconds","js/Math.floor","js/Date","wally.wallet/handle-contract-error","err","G__54358","G__54370","G__54371","p__54372","map__54373","token","net","p1__54369#","G__54384","G__54385","p__54386","map__54387","p1__54383#"],"sourcesContent":["(ns wally.wallet\n  (:require\n   [cljs-web3.core :as web3]\n   [cljs-web3.eth :as web3-eth]\n   [cljs-web3.net :as web3-net]\n   [re-frame.core :as rf]\n   [wally.data :as data])\n  (:require-macros [wally.macros :refer [inline-resource]]))\n\n(def ^:const sablier-abi (js/JSON.parse (inline-resource \"public/contracts/Sablier.json\")))\n(def ^:const erc20-abi (js/JSON.parse (inline-resource \"public/contracts/erc20.json\")))\n(def w3 (js/Web3. js/window.ethereum))\n\n\n(rf/reg-fx\n :init-w3\n (fn [{:keys [on-success on-failure]}]\n   (if js/window.ethereum\n     (.then (js/ethereum.enable)\n            #(rf/dispatch on-success)\n            #(rf/dispatch (conj on-failure :user-denied-perm)))\n     (rf/dispatch (conj on-failure :no-api)))))\n\n(defn current-network []\n  (get-in data/app-data [:networks :chain-id (web3/version-network w3)]))\n\n(defn sablier-contract []\n  (web3-eth/contract-at w3 sablier-abi (get-in data/app-data [:sablier :contracts :rinkeby])))\n\n(defn erc20-contract [address]\n  (web3-eth/contract-at w3 erc20-abi address))\n\n(defn approve-spender [ct-address spender amount cb]\n  (.approve (erc20-contract ct-address)\n            spender\n            amount\n            cb))\n\n(defn sablier-create-stream [recipient deposit token-address start-time stop-time cb]\n  (.createStream (sablier-contract)\n                 recipient\n                 deposit\n                 token-address\n                 start-time\n                 stop-time\n                 cb))\n\n(defn epoch-time-seconds []\n  (js/Math.floor (/ (.getTime (js/Date.)) 1000)))\n\n(defn handle-contract-error [err on-success on-failure]\n  (if err\n    (rf/dispatch (conj on-failure {:code (.-code err)\n                                   :message (.-message err)}))\n    (rf/dispatch on-success)))\n\n(rf/reg-fx\n :approve-spender\n (fn [{:keys [on-success on-failure token amount]}]\n   (let [net (current-network)]\n     (approve-spender (get-in data/app-data [:networks net :tokens token :address])\n                      (get-in data/app-data [:sablier :contracts net])\n                      amount\n                      #(handle-contract-error % on-success on-failure)))))\n\n(rf/reg-fx\n :create-stream\n (fn [{:keys [on-success on-failure recipient deposit token start-time stop-time]}]\n   (let [net (current-network)]\n     (sablier-create-stream\n      recipient\n      deposit\n      (get-in data/app-data [:networks net :tokens token :address])\n      start-time\n      stop-time\n      #(handle-contract-error % on-success on-failure)))))\n\n;; (approve-spender (get-in data/app-data [:networks (current-network) :tokens :testdai :address]) (get-in data/app-data [:sablier :contracts :rinkeby]) 0 #(js/console.log \"Spender approved\"))\n;; (approve-spender (get-in data/app-data [:networks (current-network) :tokens :testdai :address]) (get-in data/app-data [:sablier :contracts :rinkeby]) 5e18 #(js/console.log \"Spender approved\"))\n;; (let [time (epoch-time-seconds)] (sablier-create-stream \"0x21696aDc72C227f5c05C1d5c4AcCD7b8DB5ac9a9\" 5e18 (get-in data/app-data [:networks :rinkeby :tokens :testdai :address]) (+ time 60) (+ time 160) #(js/console.log \"DONE\")))\n"]}