{"version":3,"sources":["camel_snake_kebab/extras.cljc"],"mappings":";;;AAGA,AAAA,AAAMA,AAAgBC,AAAEC;AAAxB,AAAA;AAEE,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAqBE;AAArB,AAAAD,AAAAD,AAAA,AAAA,AAAuBG;AAAvB,AAAA,AAA4B,AAACN,AAAAA,AAAAA,AAAEK,AAAAA,AAAGC;;AAAlC,AACE,AAACC,AAAS,AAAKC;AAAL,AAAQ,AAAI,AAACC,AAAKD;AAAG,AAAA,AAACE,AAAQ,AAACC,AAAIC,AAAUJ;;AAAIA;;AAAIP","names":["camel-snake-kebab.extras/transform-keys","t","coll","p__47800","vec__47801","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","clojure.walk/postwalk","x","cljs.core/map?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","transform"],"sourcesContent":["(ns camel-snake-kebab.extras\n  (:require [clojure.walk :refer [postwalk]]))\n\n(defn transform-keys [t coll]\n  \"Recursively transforms all map keys in coll with t.\"\n  (letfn [(transform [[k v]] [(t k) v])]\n    (postwalk (fn [x] (if (map? x) (into {} (map transform x)) x)) coll)))"]}