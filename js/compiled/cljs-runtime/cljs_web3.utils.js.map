{"version":3,"sources":["cljs_web3/utils.cljs"],"mappings":"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","names":["cljs-web3.utils/safe-case","case-f","x","G__47085","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/name","clojure.string/replace","cljs.core/first","cljs.core/Keyword","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs-web3.utils/camel-case","camel-snake-kebab.core/->camelCase","cljs-web3.utils/kebab-case","camel-snake-kebab.core/->kebab-case","p1__47086#","cljs-web3.utils/js->cljk","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","cljs-web3.utils/js->cljkk","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","camel-snake-kebab.extras/transform-keys","cljs-web3.utils/cljkk->js","cljs.core/clj->js","cljs-web3.utils/callback-js->clj","cljs.core/fn?","err","res","and__4174__auto__","G__47087","G__47088","cljs-web3.utils/args-cljkk->js","args","cljs.core.map.cljs$core$IFn$_invoke$arity$2","var_args","G__47090","cljs-web3.utils/js-apply","js/Error","this","method-name","cljs_web3.utils.js_apply.cljs$core$IFn$_invoke$arity$3","G__47091","G__47092","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/js-invoke","cljs-web3.utils/js-prototype-apply","js-obj","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","cljs-web3.utils/prop-or-clb-fn","seq47093","self__4777__auto__","cljs.core/seq","ks","web3","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/aget","cljs.core/butlast","camel-snake-kebab.core/->PascalCase","cljs.core/last","G__47094","cljs-web3.utils/create-async-fn","f","vec__47095","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","ch","cljs.core.async.impl.channels/ManyToManyChannel","cljs.core/rest","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","c__45988__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__45989__auto__","switch__45965__auto__","state_47104","state_val_47105","inst_47098","cljs.core/PersistentVector","inst_47099","inst_47100","cljs.core.async.impl.ioc-helpers/put!","inst_47102","cljs.core.async.impl.ioc-helpers/return-chan","statearr-47106","state-machine__45966__auto__","ret-value__45967__auto__","result__45968__auto__","cljs.core/keyword-identical?","e47107","js/Object","ex__45969__auto__","statearr-47108","cljs.core.async.impl.ioc-helpers/process-exception","state__45990__auto__","statearr-47109","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped"],"sourcesContent":["(ns cljs-web3.utils\n  (:require [camel-snake-kebab.core :as cs :include-macros true]\n            [camel-snake-kebab.extras :refer [transform-keys]]\n            [cljs.core.async :refer [>! chan]]\n            [clojure.string :as string])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(defn safe-case [case-f]\n  (fn [x]\n    (cond-> (subs (name x) 1)\n      true (string/replace \"_\" \"*\")\n      true case-f\n      true (string/replace \"*\" \"_\")\n      true (->> (str (first (name x))))\n      (keyword? x) keyword)))\n\n(def camel-case (safe-case cs/->camelCase))\n(def kebab-case (safe-case cs/->kebab-case))\n\n(def js->cljk #(js->clj % :keywordize-keys true))\n\n(def js->cljkk\n  \"From JavaScript to Clojure with kekab-cased keywords.\"\n  (comp (partial transform-keys kebab-case) js->cljk))\n\n(def cljkk->js\n  \"From Clojure with kebab-cased keywords to JavaScript.\"\n  (comp clj->js (partial transform-keys camel-case)))\n\n(defn callback-js->clj [x]\n  (if (fn? x)\n    (fn [err res]\n      (when (and res (aget res \"v\"))\n        (aset res \"v\" (aget res \"v\")))                      ;; Prevent weird bug in advanced optimisations\n      (x err (js->cljkk res)))\n    x))\n\n(defn args-cljkk->js [args]\n  (map (comp cljkk->js callback-js->clj) args))\n\n(defn js-apply\n  ([this method-name]\n   (js-apply this method-name nil))\n  ([this method-name args]\n   (let [method-name (camel-case (name method-name))]\n     (if (aget this method-name)\n       (js->cljkk (apply js-invoke this method-name (args-cljkk->js args)))\n       (throw (str \"Method: \" method-name \" was not found in object.\"))))))\n\n(defn js-prototype-apply [js-obj method-name args]\n  (js-apply (aget js-obj \"prototype\") method-name args))\n\n(defn prop-or-clb-fn\n  \"Constructor to create an fn to get properties or to get properties and apply a\n  callback fn.\"\n  [& ks]\n  (fn [web3 & args]\n    (if (fn? (first args))\n      (js-apply (apply aget web3 (butlast ks))\n                (str \"get\" (cs/->PascalCase (last ks)))\n                args)\n      (js->cljkk (apply aget web3 ks)))))\n\n(defn create-async-fn [f]\n  (fn [& args]\n    (let [[ch args] (if (instance? cljs.core.async.impl.channels/ManyToManyChannel (first args))\n                      [(first args) (rest args)]\n                      [(chan) args])]\n      (apply f (concat args [(fn [err res]\n                               (go (>! ch [err res])))]))\n      ch)))\n"]}